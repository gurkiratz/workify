// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int      @id @default(autoincrement())
  address String @unique
  tasks   Task[]
  payouts       Payouts[]
}

model Worker {
  id          Int      @id @default(autoincrement())
  address     String @unique
  submissions Submission[]
  pending_amount      Int    // amount in lamports (* 10^9)
  locked_amount       Int
}

model Task {
  id      Int      @id @default(autoincrement())
  title   String?   @default("Select the most clickable thumbnail")
  options Option[]
  user    User @relation(fields: [userId], references: [id])
  userId  Int
  signature String
  amount Int
  done   Boolean @default(false)
  submissions Submission[]
}

model Option {
  id        Int      @id @default(autoincrement())
  image_url String 
  task      Task @relation(fields: [taskId], references: [id])
  taskId    Int
  submissions Submission[]
}

model Submission {
  id        Int      @id @default(autoincrement())
  worker    Worker @relation(fields: [workerId], references: [id])
  workerId  Int
  option    Option @relation(fields: [optionId], references: [id])
  optionId  Int
  task      Task @relation(fields: [taskId], references: [id])
  taskId    Int
  amount     Int
  @@unique([workerId, taskId])
}

model Payouts {
  id            Int     @id @default(autoincrement())
  user          User @relation(fields: [userId], references: [id])
  userId        Int
  amount        Int
  signature     String
  status        TxnStatus
}

enum TxnStatus {
  Processing
  Success
  Failure
}